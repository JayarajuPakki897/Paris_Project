setwd("F:/Ph.D/Project_PAH/Data")
# Define the Excel file path
xl_file_path <- "F:/Ph.D/Project_PAH/Data/SIRTA_long term_2015_Max Planck_complete_vf02.xlsx"
# Read all sheets from the Excel file and print their names
sheets <- excel_sheets(xl_file_path)
print(sheets)
# Loop through each sheet, read it, and print the head of the data
for (sheet in sheets) {
cat("\nSheet:", sheet, "\n")
sheet_data <- read_excel(xl_file_path, sheet = sheet)
print(head(sheet_data))
}
# Clear workspace
rm(list = ls())
# Define necessary packages for installation and loading
packages <- c("tidyverse", "lubridate", "openair", "gdata", "readxl")
# Install packages if not already installed
install_if_missing <- function(packages) {
new_packages <- packages[!(packages %in% installed.packages()[, "Package"])]
if (length(new_packages)) install.packages(new_packages)
}
install_if_missing(packages)
# Load required libraries
lapply(packages, library, character.only = TRUE)
# Set working directory
setwd("F:/Ph.D/Project_PAH/Data")
# Define the Excel file path
xl_file_path <- "F:/Ph.D/Project_PAH/Data/SIRTA_long term_2015_Max Planck_complete_vf02.xlsx"
# Read the "Database" sheet
sheet_name <- "Database"
Database_data <- read_excel(xl_file_path, sheet = sheet_name)
# Print all column names (keys) in the "Database" sheet
column_names <- colnames(Database_data)
print(column_names)
# Clear workspace
rm(list = ls())
# Define necessary packages for installation and loading
packages <- c("tidyverse", "lubridate", "openair", "gdata", "readxl")
# Install packages if not already installed
install_if_missing <- function(packages) {
new_packages <- packages[!(packages %in% installed.packages()[, "Package"])]
if (length(new_packages)) install.packages(new_packages)
}
install_if_missing(packages)
# Load required libraries
lapply(packages, library, character.only = TRUE)
# Set working directory
setwd("F:/Ph.D/Project_PAH/Data")
# Define the Excel file path
xl_file_path <- "F:/Ph.D/Project_PAH/Data/SIRTA_long term_2015_Max Planck_complete_vf02.xlsx"
# Read the "Database" sheet
sheet_name <- "Database"
Database_data <- read_excel(xl_file_path, sheet = sheet_name)
# Print all column names (keys) in the "Database" sheet
column_names <- colnames(Database_data)
print(column_names)
# Clear workspace
rm(list = ls())
# Define necessary packages for installation and loading
packages <- c("tidyverse", "lubridate", "openair", "gdata", "readxl")
# Install packages if not already installed
install_if_missing <- function(packages) {
new_packages <- packages[!(packages %in% installed.packages()[, "Package"])]
if (length(new_packages)) install.packages(new_packages)
}
install_if_missing(packages)
# Load required libraries
lapply(packages, library, character.only = TRUE)
# Set working directory
setwd("F:/Ph.D/Project_PAH/Data")
# Define the Excel file path
xl_file_path <- "F:/Ph.D/Project_PAH/Data/SIRTA_long term_2015_Max Planck_complete_vf02.xlsx"
# Read the "Database" sheet
sheet_name <- "Database"
Data1 <- read_excel(xl_file_path, sheet = sheet_name)
# Clean data by removing rows with NA values
Data1 <- na.omit(Data1)
# Convert columns to appropriate types if necessary
Data1 <- Data1 %>%
mutate(WS = as.numeric(WS),
WD = as.numeric(WD),
PM10 = as.numeric(PM10))
dev.off()
# Define necessary packages for installation and loading
packages <- c("tidyverse", "lubridate", "openair", "gdata", "readxl")
# Install packages if not already installed
install_if_missing <- function(packages) {
new_packages <- packages[!(packages %in% installed.packages()[, "Package"])]
if (length(new_packages)) install.packages(new_packages)
}
install_if_missing(packages)
# Load required libraries
lapply(packages, library, character.only = TRUE)
# Set working directory
setwd("F:/Ph.D/Project_PAH/Data")
# Define the Excel file path
xl_file_path <- "F:/Ph.D/Project_PAH/Data/SIRTA_long term_2015_Max Planck_complete_vf02.xlsx"
# Read the "Database" sheet
sheet_name <- "Database"
Data1 <- read_excel(xl_file_path, sheet = sheet_name)
# Clean data by removing rows with NA values
Data1 <- na.omit(Data1)
# Convert columns to appropriate types if necessary
Data1 <- Data1 %>%
mutate(WS = as.numeric(WS),
WD = as.numeric(WD),
PM10 = as.numeric(PM10))
# Clear workspace
rm(list = ls())
# Define necessary packages for installation and loading
packages <- c("tidyverse", "lubridate", "openair", "gdata", "readxl")
# Install packages if not already installed
install_if_missing <- function(packages) {
new_packages <- packages[!(packages %in% installed.packages()[, "Package"])]
if (length(new_packages)) install.packages(new_packages)
}
install_if_missing(packages)
# Load required libraries
lapply(packages, library, character.only = TRUE)
# Set working directory
setwd("F:/Ph.D/Project_PAH/Data")
# Define the Excel file path
xl_file_path <- "F:/Ph.D/Project_PAH/Data/SIRTA_long term_2015_Max Planck_complete_vf02.xlsx"
# Read the "Database" sheet
sheet_name <- "Database"
Data1 <- read_excel(xl_file_path, sheet = sheet_name)
# Clean data by removing rows with NA values
Data1 <- na.omit(Data1)
# Convert columns to appropriate types if necessary
Data1 <- Data1 %>%
mutate(WS = as.numeric(WS),
WD = as.numeric(WD),
PM10 = as.numeric(PM10))
# Load required libraries
lapply(packages, library, character.only = TRUE)
# Set working directory
setwd("F:/Ph.D/Project_PAH/Data")
# Define the Excel file path
xl_file_path <- "F:/Ph.D/Project_PAH/Data/SIRTA_long term_2015_Max Planck_complete_vf02.xlsx"
# Read the "Database" sheet
sheet_name <- "Database"
Data1 <- read_excel(xl_file_path, sheet = sheet_name)
# Clean data by removing rows with NA values
Data1 <- na.omit(Data1)
# Convert columns to appropriate types if necessary
Data1 <- Data1 %>%
mutate(WS = as.numeric(Ws),
WD = as.numeric(Wd),
PM10 = as.numeric(PM10))
# Create a polar plot using the openair package
polarPlot(Data1, pollutant = "PM10", ws = "Ws", wd = "Wd", statistic = "nwr",
main = "Polar Plot for PM10")
# Clear workspace
rm(list = ls())
# Define necessary packages for installation and loading
packages <- c("tidyverse", "lubridate", "openair", "gdata", "readxl")
# Install packages if not already installed
install_if_missing <- function(packages) {
new_packages <- packages[!(packages %in% installed.packages()[, "Package"])]
if (length(new_packages)) install.packages(new_packages)
}
install_if_missing(packages)
# Load required libraries
lapply(packages, library, character.only = TRUE)
# Set working directory
setwd("F:/Ph.D/Project_PAH/Data")
# Define the Excel file path
xl_file_path <- "F:/Ph.D/Project_PAH/Data/SIRTA_long term_2015_Max Planck_complete_vf02.xlsx"
# Read the "Database" sheet
sheet_name <- "Database"
Data1 <- read_excel(xl_file_path, sheet = sheet_name)
# Clean data by removing rows with NA values
Data1 <- na.omit(Data1)
# Convert columns to appropriate types if necessary
Data1 <- Data1 %>%
mutate(Ws = as.numeric(Ws),
Wd = as.numeric(Wd),
PM10 = as.numeric(PM10))
# Create a polar plot using the openair package
polarPlot(Data1, pollutant = "PM10", ws = "Ws", wd = "Wd", statistic = "nwr",
main = "Polar Plot for PM10")
# Create a polar plot using the openair package
polarPlot(Data1, pollutant = "PM10", Ws = "Ws", Wd = "Wd", statistic = "nwr",
main = "Polar Plot for PM10")
# Clear workspace
rm(list = ls())
# Define necessary packages for installation and loading
packages <- c("tidyverse", "lubridate", "openair", "gdata", "readxl")
# Install packages if not already installed
install_if_missing <- function(packages) {
new_packages <- packages[!(packages %in% installed.packages()[, "Package"])]
if (length(new_packages)) install.packages(new_packages)
}
install_if_missing(packages)
# Load required libraries
lapply(packages, library, character.only = TRUE)
# Set working directory
setwd("F:/Ph.D/Project_PAH/Data")
# Define the Excel file path
xl_file_path <- "F:/Ph.D/Project_PAH/Data/SIRTA_long term_2015_Max Planck_complete_vf02.xlsx"
# Read the "Database" sheet
sheet_name <- "Database"
Data1 <- read_excel(xl_file_path, sheet = sheet_name)
# Clean data by removing rows with NA values
Data1 <- na.omit(Data1)
# Check for and print unique values in 'Ws' and 'Wd'
unique_ws <- unique(Data1$Ws)
unique_wd <- unique(Data1$Wd)
print("Unique values in Ws:")
print(unique_ws)
print("Unique values in Wd:")
print(unique_wd)
# Convert columns to appropriate types if necessary
Data1 <- Data1 %>%
mutate(
Ws = as.numeric(as.character(Ws)),
Wd = as.numeric(as.character(Wd)),
PM10 = as.numeric(PM10)
)
# Create a polar plot using the openair package
polarPlot(Data1, pollutant = "PM10", ws = "Ws", wd = "Wd", statistic = "nwr",
main = "Polar Plot for PM10")
# Convert 'Ws' and 'Wd' to numeric, handling non-numeric values
Data1 <- Data1 %>%
mutate(
Ws = as.numeric(gsub("[^0-9.]", "", Ws)),  # Remove non-numeric characters except decimal points
Wd = as.numeric(gsub("[^0-9.]", "", Wd)),  # Remove non-numeric characters except decimal points
PM10 = as.numeric(PM10)  # Ensure PM10 is numeric
)
# Check the data after conversion
summary(Data1)
# Create a polar plot using the openair package
polarPlot(Data1, pollutant = "PM10", ws = "Ws", wd = "Wd", statistic = "nwr",
main = "Polar Plot for PM10")
# Create a polar plot using the openair package
polarPlot(Data1, pollutant = "PM10", Ws = "Ws", Wd = "Wd", statistic = "nwr",
main = "Polar Plot for PM10")
# Check column names in Data1
colnames(Data1)
# Clear workspace
rm(list = ls())
# Define necessary packages for installation and loading
packages <- c("tidyverse", "lubridate", "openair", "gdata", "readxl")
# Install packages if not already installed
install_if_missing <- function(packages) {
new_packages <- packages[!(packages %in% installed.packages()[, "Package"])]
if (length(new_packages)) install.packages(new_packages)
}
install_if_missing(packages)
# Load required libraries
lapply(packages, library, character.only = TRUE)
# Set working directory
setwd("F:/Ph.D/Project_PAH/Data")
# Define the Excel file path
xl_file_path <- "F:/Ph.D/Project_PAH/Data/SIRTA_long term_2015_Max Planck_complete_vf02.xlsx"
# Read the data from the "Database" sheet, skipping the first row
Data1 <- read_excel(xl_file_path, sheet = "Database", skip = 1)
# Convert columns to appropriate types if necessary
Data1 <- Data1 %>%
mutate(
Ws = as.numeric(as.character(Ws)),
Wd = as.numeric(as.character(Wd)),
PM10 = as.numeric(PM10)
)
rlang::last_trace()
rlang::last_trace(drop = FALSE)
# Print the column names of the dataset
print(colnames(Data1))
# Load necessary libraries
library(tidyverse)
library(readxl)
# Define the Excel file path
xl_file_path <- "F:/Ph.D/Project_PAH/Data/SIRTA_long term_2015_Max Planck_complete_vf02.xlsx"
# Read the data, skipping the first row (which contains units)
Data1 <- read_excel(xl_file_path, sheet = "Database", skip = 1, col_names = TRUE)
# Print column names to check
print(colnames(Data1))
# Load necessary libraries
library(tidyverse)
library(readxl)
library(openair)
# Define the Excel file path
xl_file_path <- "F:/Ph.D/Project_PAH/Data/SIRTA_long term_2015_Max Planck_complete_vf02.xlsx"
# Read the data, skipping the first row (which contains units)
Data1 <- read_excel(xl_file_path, sheet = "Database", skip = 0, col_names = TRUE)
# Print column names to check
print(colnames(Data1))
# Convert columns to numeric
Data1 <- Data1 %>%
mutate(
Ws = as.numeric(as.character(Ws)),
Wd = as.numeric(as.character(Wd)),
PM10 = as.numeric(as.character(PM10))
# Add more columns as needed
)
# Check for NA values
print("Check for NA values:")
print(sum(is.na(Data1$Ws)))
print(sum(is.na(Data1$Wd)))
print(sum(is.na(Data1$PM10)))
# Create a polar plot using the openair package
polarPlot(Data1, pollutant = "PM10", ws = "Ws", wd = "Wd", statistic = "nwr",
main = "Polar Plot for PM10")
# Create a polar plot using the openair package
polarPlot(Data1, pollutant = "PM10", Ws = "Ws", Wd = "Wd", statistic = "nwr",
main = "Polar Plot for PM10")
# Load necessary libraries
library(tidyverse)
library(readxl)
library(openair)
# Define the Excel file path
xl_file_path <- "F:/Ph.D/Project_PAH/Data/SIRTA_long term_2015_Max Planck_complete_vf02.xlsx"
# Read the data, skipping the first row (which contains units)
Data1 <- read_excel(xl_file_path, sheet = "Database", skip = 0, col_names = TRUE)
# Print column names to check
print(colnames(Data1))
# Convert columns to numeric
Data1 <- Data1 %>%
mutate(
Ws = as.numeric(as.character(Ws)),
Wd = as.numeric(as.character(Wd)),
PM10 = as.numeric(as.character(PM10))
# Add more columns as needed
)
# Remove rows with NA values in relevant columns
Data1 <- Data1 %>%
drop_na(Ws, Wd, PM10)
# Check for NA values again to confirm removal
print("Check for NA values after removal:")
print(sum(is.na(Data1$Ws)))
print(sum(is.na(Data1$Wd)))
print(sum(is.na(Data1$PM10)))
# Create a polar plot using the openair package
polarPlot(Data1, pollutant = "PM10", ws = "Ws", wd = "Wd", statistic = "nwr",
main = "Polar Plot for PM10")
# Create a polar plot using the openair package
polarPlot(Data1, pollutant = "PM10", Ws = "Ws", wd = "Wd", statistic = "nwr",
main = "Polar Plot for PM10")
# Define the Excel file path
xl_file_path <- "F:/Ph.D/Project_PAH/Data/SIRTA_long term_2015_Max Planck_complete_vf02.xlsx"
# Read the data, skipping the first row (which contains units)
Data1 <- read_excel(xl_file_path, sheet = "Database", skip = 0, col_names = TRUE)
# Print column names to check
print(colnames(Data1))
# Convert columns to numeric
Data1 <- Data1 %>%
mutate(
Ws = as.numeric(as.character(Ws)),
Wd = as.numeric(as.character(Wd)),
PM10 = as.numeric(as.character(PM10))
# Add more columns as needed
)
# Convert columns to numeric
Data1 <- Data1 %>%
mutate(
Ws = as.numeric(as.character(Ws)),
Wd = as.numeric(as.character(Wd)),
PM10 = as.numeric(as.character(PM10))
# Add more columns as needed
)
# Remove rows with NA values in relevant columns
Data1 <- Data1 %>%
drop_na(Ws, Wd, PM10)
# Check for NA values again to confirm removal
print("Check for NA values after removal:")
print(sum(is.na(Data1$Ws)))
print(sum(is.na(Data1$Wd)))
print(sum(is.na(Data1$PM10)))
# Create a polar plot using the openair package
polarPlot(Data1, pollutant = "PM10", Ws = "Ws", Wd = "Wd", statistic = "nwr",
main = "Polar Plot for PM10")
# Create a polar plot using the openair package
polarPlot(Data1, pollutant = "PM10", x = "Ws", wd = "Wd", statistic = "nwr",
main = "Polar Plot for PM10")
# Convert the 'Sampling date' column to Date type if needed
Data1 <- Data1 %>%
mutate(Sampling_date = as.Date(Sampling_date, format = "%Y-%m-%d"))
head(Data1 %>% select(1:5))  # Adjust the column range as needed
head(Data1 %>% select(1:2))  # Adjust the column range as needed
head(Data1 %>% select(1:1))  # Adjust the column range as needed
# Rename the first column
Data1 <- Data1 %>%
rename(
SamplingDate = `...1`  # Replace 'SamplingDate' with the appropriate column name
)
# Print the first few rows to check the updated column names
head(Data1)
# Load necessary libraries
library(tidyverse)
library(readxl)
library(openair)
# Define the Excel file path
xl_file_path <- "F:/Ph.D/Project_PAH/Data/SIRTA_long term_2015_Max Planck_complete_vf02.xlsx"
# Read the data, skipping the first row (which contains units)
Data1 <- read_excel(xl_file_path, sheet = "Database", skip = 1)
# Rename columns for clarity
colnames(Data1) <- c("SamplingDate", "PM10", "OC", "EC", "BC", "BCff", "BCwb", "Levoglucosan",
"MSA", "Oxalate", "Cl-")
# Convert columns to appropriate data types
Data1 <- Data1 %>%
mutate(
SamplingDate = as.Date(SamplingDate, origin = "1899-12-30"),  # Convert Excel date to R date
PM10 = as.numeric(as.character(PM10)),
OC = as.numeric(as.character(OC)),
EC = as.numeric(as.character(EC)),
BC = as.numeric(as.character(BC)),
BCff = as.numeric(as.character(BCff)),
BCwb = as.numeric(as.character(BCwb)),
Levoglucosan = as.numeric(as.character(Levoglucosan)),
MSA = as.numeric(as.character(MSA)),
Oxalate = as.numeric(as.character(Oxalate)),
`Cl-` = as.numeric(as.character(`Cl-`))
# Add more columns as needed
)
# Load necessary libraries
library(tidyverse)
library(readxl)
library(openair)
# Define the Excel file path
xl_file_path <- "F:/Ph.D/Project_PAH/Data/SIRTA_long term_2015_Max Planck_complete_vf02.xlsx"
# Read the data, skipping the first row (which contains units)
Data1 <- read_excel(xl_file_path, sheet = "Database", skip = 1)
# Rename columns for clarity
colnames(Data1) <- c("SamplingDate", "PM10", "OC", "EC", "BC", "BCff", "BCwb", "Levoglucosan",
"MSA", "Oxalate", "Cl-", "Ws", "Wd")
# Select only the relevant columns
Data1 <- Data1 %>%
select(SamplingDate, PM10, Ws, Wd)
# Convert columns to appropriate data types
Data1 <- Data1 %>%
mutate(
SamplingDate = as.Date(SamplingDate, origin = "1899-12-30"),  # Convert Excel date to R date
PM10 = as.numeric(as.character(PM10)),
Ws = as.numeric(as.character(Ws)),
Wd = as.numeric(as.character(Wd))
)
# Remove rows with NA values in relevant columns
Data1 <- Data1 %>%
drop_na(PM10, Ws, Wd)
# Check the first few rows to confirm changes
print(head(Data1))
# Check for NA values
print("Check for NA values after removal:")
print(sum(is.na(Data1$PM10)))
print(sum(is.na(Data1$Ws)))
print(sum(is.na(Data1$Wd)))
# Create a polar plot using the openair package
polarPlot(Data1, pollutant = "PM10", ws = "Ws", wd = "Wd", statistic = "nwr",
main = "Polar Plot for PM10")
# Create a polar plot using the openair package
polarPlot(Data1, pollutant = "PM10", x = "Ws", wd = "Wd", statistic = "nwr",
main = "Polar Plot for PM10")
# Load necessary libraries
library(tidyverse)
library(readxl)
library(openair)
# Define the Excel file path
xl_file_path <- "F:/Ph.D/Project_PAH/Data/SIRTA_long term_2015_Max Planck_complete_vf02.xlsx"
# Read the data, skipping the first row (which contains units)
Data1 <- read_excel(xl_file_path, sheet = "Database", skip = 0, col_names = TRUE)
# Print column names to check
print(colnames(Data1))
# Convert columns to numeric
Data1 <- Data1 %>%
mutate(
Ws = as.numeric(as.character(Ws)),
Wd = as.numeric(as.character(Wd)),
PM10 = as.numeric(as.character(PM10))
# Add more columns as needed
)
# Remove rows with NA values in relevant columns
Data1 <- Data1 %>%
drop_na(Ws, Wd, PM10)
# Check for NA values again to confirm removal
print("Check for NA values after removal:")
print(sum(is.na(Data1$Ws)))
print(sum(is.na(Data1$Wd)))
print(sum(is.na(Data1$PM10)))
# Create a polar plot using the openair package
polarPlot(Data1, pollutant = "PM10", x = "Ws", wd = "Wd", statistic = "nwr",
main = "Polar Plot for PM10")
dev.off()
# Load necessary libraries
library(tidyverse)
library(readxl)
library(openair)
# Define the Excel file path
xl_file_path <- "F:/Ph.D/Project_PAH/Data/SIRTA_long term_2015_Max Planck_complete_vf02.xlsx"
# Read the data, skipping the first row (which contains units)
Data1 <- read_excel(xl_file_path, sheet = "Database", skip = 0, col_names = TRUE)
# Print column names to check
print(colnames(Data1))
# Convert columns to numeric
Data1 <- Data1 %>%
mutate(
Ws = as.numeric(as.character(Ws)),
Wd = as.numeric(as.character(Wd)),
PM10 = as.numeric(as.character(PM10))
# Add more columns as needed
)
# Remove rows with NA values in relevant columns
Data1 <- Data1 %>%
drop_na(Ws, Wd, PM10)
# Check for NA values again to confirm removal
print("Check for NA values after removal:")
print(sum(is.na(Data1$Ws)))
print(sum(is.na(Data1$Wd)))
print(sum(is.na(Data1$PM10)))
# Create a polar plot using the openair package
polarPlot(Data1, pollutant = "PM10", x = "Ws", wd = "Wd", statistic = "nwr",
main = "Polar Plot for PM10")
dev.off()
